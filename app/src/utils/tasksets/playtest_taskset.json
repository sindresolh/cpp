[
  {
    "codeBlocks": [
      {
        "code": "def sum_list(items):",
        "category": "function",
        "indent": 0,
        "id": "1"
      },
      {
        "code": "sum_numbers = 0",
        "category": "variable",
        "indent": 1,
        "id": "2"
      },
      {
        "code": "for x in items:",
        "category": "loop",
        "indent": 1,
        "id": "3"
      },
      {
        "code": "sum_numbers += x",
        "category": "variable",
        "indent": 2,
        "id": "4"
      },
      {
        "code": "return sum_numbers",
        "category": "function",
        "indent": 1,
        "id": "5"
      }
    ],
    "distractors": [
      {
        "code": "function sum_list(items)",
        "category": "function",
        "indent": 0,
        "id": "6"
      },
      {
        "code": "for x in items.lenght:",
        "category": "loop",
        "indent": 1,
        "id": "7"
      }
    ],
    "description": "Create a function that sums elements in a list and returns the sum.",
    "hints": [
      "Make sure code is indented after function decleration.",
      "Declare sum_list before you iterate over the items."
    ],
    "attempts": "unlimited",
    "field": []
  },
  {
    "codeBlocks": [
      {
        "code": "def first_equals_last(numList):",
        "category": "function",
        "indent": 0,
        "id": "1"
      },
      {
        "code": "first = numList[0]",
        "category": "variable",
        "indent": 1,
        "id": "2"
      },
      {
        "code": "last = numList[-1]",
        "category": "variable",
        "indent": 1,
        "id": "3"
      },
      {
        "code": "if first == last:",
        "category": "condition",
        "indent": 1,
        "id": "4"
      },
      {
        "code": "return True",
        "category": "function",
        "indent": 2,
        "id": "5"
      },
      {
        "code": "return False",
        "category": "function",
        "indent": 1,
        "id": "7"
      }
    ],
    "distractors": [
      {
        "code": "first = numList[1]",
        "category": "variable",
        "indent": 0,
        "id": "8"
      },
      {
        "code": "if first = last:",
        "category": "variable",
        "indent": 0,
        "id": "10"
      }
    ],
    "otherSolutions": [
      [
        {
          "code": "def first_equals_last(numList):",
          "category": "function",
          "indent": 0,
          "id": "1"
        },
        {
          "code": "last = numList[-1]",
          "category": "variable",
          "indent": 1,
          "id": "3"
        },
        {
          "code": "first = numList[0]",
          "category": "variable",
          "indent": 1,
          "id": "2"
        },
        {
          "code": "if first == last:",
          "category": "condition",
          "indent": 1,
          "id": "4"
        },
        {
          "code": "return True",
          "category": "function",
          "indent": 2,
          "id": "5"
        },
        {
          "code": "return False",
          "category": "function",
          "indent": 1,
          "id": "7"
        }
      ]
    ],
    "description": "Write a function to return True if the first and last number of a given list are equal. If numbers are different then return False.",
    "hints": [
      "Index -1 can be used to get the last item in an array.",
      "For example, if the given list is: [10, 20, 30, 40, 10] result is True",
      "For example, if the given list is: [75, 65, 35, 75, 30] result is False"
    ],
    "attempts": "unlimited",
    "field": []
  },
   {
    "codeBlocks": [
      {
        "code": "def merge_list(list1, list2):",
        "category": "function",
        "indent": 0,
        "id": "1"
      },
      {
        "code": "result_list = []",
        "category": "variable",
        "indent": 1,
        "id": "2"
      },
      {
        "code": "for num in list1:",
        "category": "loop",
        "indent": 1,
        "id": "3"
      },
      {
        "code": "if num % 2 != 0:",
        "category": "condition",
        "indent": 2,
        "id": "4"
      },
      {
        "code": "result_list.append(num)",
        "category": "function",
        "indent": 3,
        "id": "5"
      },
      {
        "code": "for num in list2:",
        "category": "loop",
        "indent": 1,
        "id": "6"
      },
      {
        "code": "if num % 2 == 0:",
        "category": "condition",
        "indent": 2,
        "id": "7"
      },
      {
        "code": "result_list.append(num)",
        "category": "function",
        "indent": 3,
        "id": "8"
      },
      {
        "code": "return result_list",
        "category": "function",
        "indent": 1,
        "id": "9"
      }
    ],
    "otherSolutions": [
      [
        {
          "code": "def merge_list(list1, list2):",
          "category": "function",
          "indent": 0,
          "id": "1"
        },
        {
          "code": "result_list = []",
          "category": "variable",
          "indent": 1,
          "id": "2"
        },
        {
          "code": "for num in list2:",
          "category": "loop",
          "indent": 1,
          "id": "6"
        },
        {
          "code": "if num % 2 == 0:",
          "category": "condition",
          "indent": 2,
          "id": "7"
        },
        {
          "code": "result_list.append(num)",
          "category": "function",
          "indent": 3,
          "id": "8"
        },
        {
          "code": "for num in list1:",
          "category": "loop",
          "indent": 1,
          "id": "3"
        },
        {
          "code": "if num % 2 != 0:",
          "category": "condition",
          "indent": 2,
          "id": "4"
        },
        {
          "code": "result_list.append(num)",
          "category": "function",
          "indent": 3,
          "id": "5"
        },
        {
          "code": "return result_list",
          "category": "function",
          "indent": 1,
          "id": "9"
        } ],
        [
        {
          "code": "def merge_list(list1, list2):",
          "category": "function",
          "indent": 0,
          "id": "1"
        },
        {
          "code": "result_list = []",
          "category": "variable",
          "indent": 1,
          "id": "2"
        },
        {
          "code": "for num in list2:",
          "category": "loop",
          "indent": 1,
          "id": "6"
        },
        {
          "code": "if num % 2 != 0:",
          "category": "condition",
          "indent": 2,
          "id": "7"
        },
        {
          "code": "result_list.append(num)",
          "category": "function",
          "indent": 3,
          "id": "8"
        },
        {
          "code": "for num in list1:",
          "category": "loop",
          "indent": 1,
          "id": "3"
        },
        {
          "code": "if num % 2 != 0:",
          "category": "condition",
          "indent": 2,
          "id": "4"
        },
        {
          "code": "result_list.append(num)",
          "category": "function",
          "indent": 3,
          "id": "5"
        },
        {
          "code": "return result_list",
          "category": "function",
          "indent": 1,
          "id": "9"
        }
      ],
        [
        {
          "code": "def merge_list(list1, list2):",
          "category": "function",
          "indent": 0,
          "id": "1"
        },
        {
          "code": "result_list = []",
          "category": "variable",
          "indent": 1,
          "id": "2"
        },
        {
          "code": "for num in list1:",
          "category": "loop",
          "indent": 1,
          "id": "3"
        },
        {
          "code": "if num % 2 == 0:",
          "category": "condition",
          "indent": 2,
          "id": "4"
        },
        {
          "code": "result_list.append(num)",
          "category": "function",
          "indent": 3,
          "id": "5"
        },
        {
          "code": "for num in list2:",
          "category": "loop",
          "indent": 1,
          "id": "6"
        },
        {
          "code": "if num % 2 != 0:",
          "category": "condition",
          "indent": 2,
          "id": "7"
        },
        {
          "code": "result_list.append(num)",
          "category": "function",
          "indent": 3,
          "id": "8"
        },
        {
          "code": "return result_list",
          "category": "function",
          "indent": 1,
          "id": "9"
        }
      ]
    ],
    "distractors": [],
    "description": "Write a function that merges two lists of numbers, such that the new list should contain odd numbers from the first list and even numbers from the second list.",
    "hints": [
      "Create an empty list named result_list",
      "Iterate first list using a for loop, then iterate the next list using a for loop",
      "Use % (modulo) to check for odd or even numbers",
      "Append odd numbers from list1 and even numbers from list2"
    ],
    "attempts": "unlimited",
    "field": []
  },
      {
    "codeBlocks": [
      {
        "code": "n = int(input())",
        "category": "variable",
        "indent": 0,
        "id": "1"
      },
      {
        "code": "count, n1, n2 = 0, 0, 1",
        "category": "variable",
        "indent": 0,
        "id": "2"
      },
      {
        "code": "if n == 1:",
        "category": "condition",
        "indent": 0,
        "id": "4"
      },
      {
        "code": "print(n1)",
        "category": "function",
        "indent": 1,
        "id": "5"
      },
      {
        "code": "else:",
        "category": "condition",
        "indent": 0,
        "id": "6"
      },
      {
        "code": "while count < n:",
        "category": "loop",
        "indent": 1,
        "id": "7"
      },
      {
        "code": "print(n1)",
        "category": "function",
        "indent": 2,
        "id": "8"
      },
      {
        "code": "nth = n1 + n2",
        "category": "variable",
        "indent": 2,
        "id": "9"
      },
      {
        "code": "n1 = n2",
        "category": "variable",
        "indent": 2,
        "id": "10"
      },
      {
        "code": "n2 = nth",
        "category": "variable",
        "indent": 2,
        "id": "11"
      },
      {
        "code": "count += 1",
        "category": "variable",
        "indent": 2,
        "id": "12"
      }
    ],
    "distractors": [
    ],
    "otherSolutions": [
      [
        {
          "code": "count, n1, n2 = 0, 0, 1",
          "category": "variable",
          "indent": 0,
          "id": "2"
        },
        {
          "code": "n = int(input())",
          "category": "variable",
          "indent": 0,
          "id": "1"
        },
        {
          "code": "if n == 1:",
          "category": "condition",
          "indent": 0,
          "id": "4"
        },
        {
          "code": "print(n1)",
          "category": "function",
          "indent": 1,
          "id": "5"
        },
        {
          "code": "else:",
          "category": "condition",
          "indent": 0,
          "id": "6"
        },
        {
          "code": "while count < n:",
          "category": "loop",
          "indent": 1,
          "id": "7"
        },
        {
          "code": "print(n1)",
          "category": "function",
          "indent": 2,
          "id": "8"
        },
        {
          "code": "nth = n1 + n2",
          "category": "variable",
          "indent": 2,
          "id": "9"
        },
        {
          "code": "n1 = n2",
          "category": "variable",
          "indent": 2,
          "id": "10"
        },
        {
          "code": "n2 = nth",
          "category": "variable",
          "indent": 2,
          "id": "11"
        },
        {
          "code": "count += 1",
          "category": "variable",
          "indent": 2,
          "id": "12"
        }
      ],
        [
        {
          "code": "count, n1, n2 = 0, 0, 1",
          "category": "variable",
          "indent": 0,
          "id": "2"
        },
        {
          "code": "n = int(input())",
          "category": "variable",
          "indent": 0,
          "id": "1"
        },
        {
          "code": "if n == 1:",
          "category": "condition",
          "indent": 0,
          "id": "4"
        },
        {
          "code": "print(n1)",
          "category": "function",
          "indent": 1,
          "id": "5"
        },
        {
          "code": "else:",
          "category": "condition",
          "indent": 0,
          "id": "6"
        },
        {
          "code": "while count < n:",
          "category": "loop",
          "indent": 1,
          "id": "7"
        },
                {
          "code": "count += 1",
          "category": "variable",
          "indent": 2,
          "id": "12"
        },
        {
          "code": "print(n1)",
          "category": "function",
          "indent": 2,
          "id": "8"
        },
        {
          "code": "nth = n1 + n2",
          "category": "variable",
          "indent": 2,
          "id": "9"
        },
        {
          "code": "n1 = n2",
          "category": "variable",
          "indent": 2,
          "id": "10"
        },
        {
          "code": "n2 = nth",
          "category": "variable",
          "indent": 2,
          "id": "11"
        }
      ], [
             {
          "code": "count, n1, n2 = 0, 0, 1",
          "category": "variable",
          "indent": 0,
          "id": "2"
        },
        {
          "code": "n = int(input())",
          "category": "variable",
          "indent": 0,
          "id": "1"
        },
        {
          "code": "if n == 1:",
          "category": "condition",
          "indent": 0,
          "id": "4"
        },
        {
          "code": "print(n1)",
          "category": "function",
          "indent": 1,
          "id": "5"
        },
        {
          "code": "else:",
          "category": "condition",
          "indent": 0,
          "id": "6"
        },
        {
          "code": "while count < n:",
          "category": "loop",
          "indent": 1,
          "id": "7"
        },
        {
          "code": "print(n1)",
          "category": "function",
          "indent": 2,
          "id": "8"
        },
        {
          "code": "count += 1",
          "category": "variable",
          "indent": 2,
          "id": "12"
        },
        {
          "code": "nth = n1 + n2",
          "category": "variable",
          "indent": 2,
          "id": "9"
        },
        {
          "code": "n1 = n2",
          "category": "variable",
          "indent": 2,
          "id": "10"
        },
        {
          "code": "n2 = nth",
          "category": "variable",
          "indent": 2,
          "id": "11"
        }
      ], [
      {
        "code": "n = int(input())",
        "category": "variable",
        "indent": 0,
        "id": "1"
      },
      {
        "code": "count, n1, n2 = 0, 0, 1",
        "category": "variable",
        "indent": 0,
        "id": "2"
      },
      {
        "code": "if n == 1:",
        "category": "condition",
        "indent": 0,
        "id": "4"
      },
      {
        "code": "print(n1)",
        "category": "function",
        "indent": 1,
        "id": "5"
      },
      {
        "code": "else:",
        "category": "condition",
        "indent": 0,
        "id": "6"
      },
      {
        "code": "while count < n:",
        "category": "loop",
        "indent": 1,
        "id": "7"
      },
        {
        "code": "count += 1",
        "category": "variable",
        "indent": 2,
        "id": "12"
      },
      {
        "code": "print(n1)",
        "category": "function",
        "indent": 2,
        "id": "8"
      },
      {
        "code": "nth = n1 + n2",
        "category": "variable",
        "indent": 2,
        "id": "9"
      },
      {
        "code": "n1 = n2",
        "category": "variable",
        "indent": 2,
        "id": "10"
      },
      {
        "code": "n2 = nth",
        "category": "variable",
        "indent": 2,
        "id": "11"
      }
    ],
    [
      {
        "code": "n = int(input())",
        "category": "variable",
        "indent": 0,
        "id": "1"
      },
      {
        "code": "count, n1, n2 = 0, 0, 1",
        "category": "variable",
        "indent": 0,
        "id": "2"
      },
      {
        "code": "if n == 1:",
        "category": "condition",
        "indent": 0,
        "id": "4"
      },
      {
        "code": "print(n1)",
        "category": "function",
        "indent": 1,
        "id": "5"
      },
      {
        "code": "else:",
        "category": "condition",
        "indent": 0,
        "id": "6"
      },
      {
        "code": "while count < n:",
        "category": "loop",
        "indent": 1,
        "id": "7"
      },
      {
        "code": "print(n1)",
        "category": "function",
        "indent": 2,
        "id": "8"
      },
       {
        "code": "count += 1",
        "category": "variable",
        "indent": 2,
        "id": "12"
      },
      {
        "code": "nth = n1 + n2",
        "category": "variable",
        "indent": 2,
        "id": "9"
      },
      {
        "code": "n1 = n2",
        "category": "variable",
        "indent": 2,
        "id": "10"
      },
      {
        "code": "n2 = nth",
        "category": "variable",
        "indent": 2,
        "id": "11"
      }
    ]
    ],
    "description": "Create a program that asks for a positive integer n. The program then prints out the first n numbers in the fibonacci sequence. The first two numbers in the fibonacci sequence is 0 and 1. The next number is obtained by adding the preceding two terms. ",
    "hints": [
      "The first 7 numbers in the fibonacci sequence becomes: 0, 1, 1, 2, 3, 5, 8",
      "A fibbonaci sequence with 1 entry is an edge case. Check for this edge case first.",
      "First print the next number in the sequence, then calculate the next fibonacci number.",
      "Lastly increment the counter"
    ],
    "attempts": "unlimited",
    "field": []
  },
  {
    "codeBlocks": [
      {
        "code": "def palindrome(num):",
        "category": "function",
        "indent": 0,
        "id": "1"
      },
      {
        "code": "original, reverse = num, 0",
        "category": "variable",
        "indent": 1,
        "id": "2"
      },
      {
        "code": "while num > 0:",
        "category": "loop",
        "indent": 1,
        "id": "3"
      },
      {
        "code": "r = num % 10",
        "category": "variable",
        "indent": 2,
        "id": "4"
      },
      {
        "code": "reverse = (reverse * 10) + r",
        "category": "variable",
        "indent": 2,
        "id": "5"
      },
      {
        "code": "num = num // 10",
        "category": "variable",
        "indent": 2,
        "id": "6"
      },
      {
        "code": "if original == reverse:",
        "category": "condition",
        "indent": 1,
        "id": "7"
      },
      {
        "code": "return True",
        "category": "function",
        "indent": 2,
        "id": "8"
      },
      {
        "code": "return False",
        "category": "function",
        "indent": 1,
        "id": "10"
      }
    ],
    "otherSolutions": [
      [
         {
        "code": "def palindrome(num):",
        "category": "function",
        "indent": 0,
        "id": "1"
      },
      {
        "code": "original, reverse = num, 0",
        "category": "variable",
        "indent": 1,
        "id": "2"
      },
      {
        "code": "while num > 0:",
        "category": "loop",
        "indent": 1,
        "id": "3"
      },
      {
        "code": "r = num % 10",
        "category": "variable",
        "indent": 2,
        "id": "4"
      },
      {
        "code": "num = num // 10",
        "category": "variable",
        "indent": 2,
        "id": "6"
      },
      {
        "code": "reverse = (reverse * 10) + r",
        "category": "variable",
        "indent": 2,
        "id": "5"
      },
      {
        "code": "if original == reverse:",
        "category": "condition",
        "indent": 1,
        "id": "7"
      },
      {
        "code": "return True",
        "category": "function",
        "indent": 2,
        "id": "8"
      },
      {
        "code": "return False",
        "category": "function",
        "indent": 1,
        "id": "10"
      }
      ]
    ],
    "distractors": [],
    "description": "Write a function to check if the given number is a palindrome number. A palindrome number is a number that is same after reverse.",
    "hints": [
      "Given 121 the function should return true\n Given 125 the function should return false",
      "Modulo: 14 % 10 = 4, divide: 14 // 10 = 1, combine: 4 * 10 + 1 = 41",
      "To reverse a number the last digit needs to be multiplied by 10 for each preceding digit.",
      "To reverse a number the first digit needs to be divided by 10 for each succeeding digit.",
      "All codeblocks should be utilized in this task. No distractors."
    ],
    "attempts": "unlimited",
    "field": []
  }
]
